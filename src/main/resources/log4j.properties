#log4j.rootLogger=日志级别，appender1, appender2, ….
#
#日志级别：ALL<DEBUG<INFO<WARN<ERROR<FATAL<OFF，不区分大小写
#注意，需在控制台输入，只需将其中一个appender定义为stdout即可
#注意，rootLogger默认是对整个工程生效
#注意，如果只想对某些包操作，那么：log4j.logger.com.hutu=info, stdout，表示该日志对package com.hutu生效
#注意，这样做可以区分dev/线上，也可以减小性能影响：if(log.isDebugEnabled()){log.debug();}
log4j.rootLogger=info,Console,logFile,ERROR

### 输出到控制台 ###
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%c]%m%n

log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG

### 输出到日志文件 ###
log4j.appender.logFile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.logFile.File = logs/log.log
log4j.appender.logFile.Append = true
log4j.appender.logFile.Threshold = DEBUG ## 输出DEBUG级别以上的日志
log4j.appender.logFile.layout = org.apache.log4j.PatternLayout
log4j.appender.logFile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 保存异常信息到单独文件 ###
log4j.appender.ERROR = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ERROR.File = logs/error.log ## 异常日志文件名
log4j.appender.ERROR.Append = true
log4j.appender.ERROR.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!
log4j.appender.ERROR.layout = org.apache.log4j.PatternLayout
log4j.appender.ERROR.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n